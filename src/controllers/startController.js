const axios = require("axios");
const { botToken, groupChatId, oneTimeLinks } = require("../config/config");
const path = require("path");
const FormData = require("form-data");
const { createChatAndInviteLink } = require("../utils/chatUtils");
const { generateToken } = require("../utils/tokenUtils");
const fs = require("fs");
const { User } = require("../models/users.model");
const { Form } = require("../models/GoggleForm.model");
const { exportAnswers } = require("../controllers/quiz");

async function updateFormPeriodically() {
  try {
    const answers = await exportAnswers(); // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –∏–∑ Google Forms
    console.log("Answers:", answers);

    await Promise.all(
      answers.map(async (answer) => {
        const existingForm = await Form.findOne({ nameForm: answer.name });

        if (existingForm) {
          // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞–ø–∏—Å—å —Å –∏–º–µ–Ω–µ–º, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
          await Form.findOneAndUpdate(
            { nameForm: answer.name },
            {
              $addToSet: { genderForm: answer.gender },
              $addToSet: { ageForm: answer.age },
            },
            { new: true }
          );
          console.log(`Updated Form for '${answer.name}'`);
        } else {
          // –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
          const newForm = new Form({
            nameForm: answer.name,
            genderForm: [answer.gender],
            ageForm: [answer.age],
          });
          await newForm.save();
          console.log(`New Form data saved for '${answer.name}'`);
        }
      })
    );
  } catch (error) {
    console.error("Error updating Form:", error);
  }
}

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ updateFormPeriodically –∫–∞–∂–¥—ã–µ 250 —Å–µ–∫—É–Ω–¥ (250000 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥)
setInterval(updateFormPeriodically, 250000);

async function handleStartCommand(req, res) {
  try {
    const { message } = req.body;

    if (!message || !message.text) {
      return res
        .status(400)
        .json({ success: false, message: "Invalid message format." });
    }

    const userId = message.from.id;
    const firstName = message.from.first_name;

    const answers = await exportAnswers();
    console.log(answers);

    let userDataToUpdate = {
      firstName: message.from.first_name || "",
      lastName: message.from.last_name || "",
      userName: "@" + message.from.username || "",
      location: message.from.location || {},
      phoneNumber: message.from.phone_number || "",
      birthDate: "",
      friends: message.from.friends || [],
      address: message.from.address || "",
      email: message.from.email || "",
      contact: message.from.contact || "",
      contacts: message.from.contacts || [],
      date: message.date || 0,
      isBot: message.from.is_bot || false,
      gender: message.from.gender,
      nameForm: "", // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ answers
      genderForm: [], // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–ª—É –∏–∑ answers
      ageForm: [], // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –∏–∑ answers
    };

    const usernameWithoutAt = userDataToUpdate.userName.slice(1); // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ "@"

    const matchingAnswers = answers.filter((answer) => {
      return answer.name === usernameWithoutAt; // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç –∏–∑ Google Forms
    });

    console.log("Matching answers:", matchingAnswers);

    if (matchingAnswers.length === 0) {
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ –æ—Ç–≤–µ—Ç—ã –∏–∑ Google Forms
      console.log("No matching answers found for", usernameWithoutAt);
    }

    matchingAnswers.forEach((answer) => {
      userDataToUpdate.nameForm = answer.name;
      userDataToUpdate.genderForm.push(answer.gender); // –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ gender –≤ –º–∞—Å—Å–∏–≤ genderForm
      userDataToUpdate.ageForm.push(answer.age); // –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ age –≤ –º–∞—Å—Å–∏–≤ ageForm
    });

    console.log("Updated userDataToUpdate:", userDataToUpdate);

    // –û—á–∏—Å—Ç–∫–∞ –æ–±—ä–µ–∫—Ç–∞ userDataToUpdate –æ—Ç –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    userDataToUpdate = cleanObject(userDataToUpdate);

    let existingUser = await User.findOne({ userId });

    if (existingUser) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      existingUser.set(userDataToUpdate); // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è
      await existingUser.save();
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const newUser = new User({
        userId,
        ...userDataToUpdate,
      });
      await newUser.save();
    }

    const command = message.text.trim().toLowerCase();

    if (command === "/start") {
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –∏ –º–µ–Ω—é
      const inviteLink = await createChatAndInviteLink(botToken, groupChatId);
      const token = generateToken();
      oneTimeLinks[token] = inviteLink; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É

      const menuText = `–ö–æ–º–∞–Ω–¥—ã:\n/tarif - –û–ø—Ü–∏—è 1\n/support - –û–ø—Ü–∏—è 2\n/about - –û–ø—Ü–∏—è 3\n/tt - –û–ø—Ü–∏—è 4\n/order - –û–ø—Ü–∏—è 5`;
      const imagePath = path.join(__dirname, "welcome.jpg");

      const caption =
        `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, *${firstName}*!üî•\n\n` +
        `–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –º–∏—Ä–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–π –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –æ—Ç *QazSoft!* –Ø –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, *Baimo*, –∏ —è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –≤–∞—à–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–∞—à–µ–π –≤–µ–±-—Å—Ç—É–¥–∏–µ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–∏—è—Ç–Ω—ã–º –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º.\n\n` +
        `–í–æ—Ç –≤–∞—à–∞ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: ${inviteLink}\n\n` +
        `–ú–µ–Ω—è –∑–æ–≤—É—Ç *Baimo* –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º.\n\n` +
        `–ß—Ç–æ —è –º–æ–≥—É –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å:\n\n` +
        `üìû *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:* –ë—ã—Å—Ç—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ª—é–±—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.\n` +
        `üíª *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö:* –£–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ —Ç–æ–º, —á—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º.\n` +
        `üõí *–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤:* –ü–æ–º–æ—â—å –≤ –∑–∞–∫–∞–∑–µ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥ –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.\n\n` +
        `–ü—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —É—Å–ª—É–≥ */quiz.*\n` +
        `–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É */help*, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Å–µ –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã.\n\n` +
        `–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ QazSoft. –Ø —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –Ω–∞—à–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –±—É–¥–µ—Ç –ø–ª–æ–¥–æ—Ç–≤–æ—Ä–Ω—ã–º –∏ —É—Å–ø–µ—à–Ω—ã–º. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —ç—Ç–æ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤–º–µ—Å—Ç–µ!\n\n` +
        `*–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É –∏ –±—É–¥—å—Ç–µ –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:*`;

      const formData = new FormData();
      formData.append("chat_id", userId);
      formData.append("photo", fs.createReadStream(imagePath));
      formData.append("caption", caption);
      formData.append("parse_mode", "Markdown");

      const replyMarkup = {
        inline_keyboard: [
          [
            { text: "–ö–∞–Ω–∞–ª", url: inviteLink },
            { text: "–°–∞–π—Ç", url: "https://www.instagram.com/qazsoft.kz/" },
          ],
          [{ text: "–ò–Ω—Å—Ç–∞–≥—Ä–∞–º", url: "https://www.instagram.com/qazsoft.kz/" }],
        ],
      };

      await axios.post(
        `https://api.telegram.org/bot${botToken}/sendPhoto`,
        formData,
        {
          headers: formData.getHeaders(),
          params: { reply_markup: JSON.stringify(replyMarkup) },
        }
      );

      res.status(200).json({
        success: true,
        message: "Invite link and menu sent successfully.",
      });
    } else {
      const unknownCommandText = `–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É.`;
      await axios.post(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        chat_id: userId,
        text: unknownCommandText,
      });

      res.status(200).json({
        success: true,
        message: "Unknown command processed successfully.",
      });
    }
  } catch (error) {
    console.error("Error handling /start command:", error);
    res.status(500).json({ success: false, message: "An error occurred." });
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –æ–±—ä–µ–∫—Ç–∞
function cleanObject(obj) {
  const cleaned = {};
  for (const [key, value] of Object.entries(obj)) {
    if (
      value !== undefined &&
      value !== null &&
      value !== "" &&
      !(Array.isArray(value) && value.length === 0)
    ) {
      cleaned[key] = value;
    }
  }
  return cleaned;
}

module.exports = {
  handleStartCommand,
};
